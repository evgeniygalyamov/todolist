{"ast":null,"code":"var _jsxFileName = \"/Users/galyamov/Desktop/1-todolist/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from \"./Todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const todolistTitle = \"What to learn\";\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    title: \"HTML\",\n    isDone: true\n  }, {\n    id: 2,\n    title: \"React\",\n    isDone: false\n  }, {\n    id: 3,\n    title: \"CSS\",\n    isDone: true\n  }, {\n    id: 4,\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: 5,\n    title: \"Redux\",\n    isDone: false\n  }]);\n  const [filter, setFilter] = useState(\"all\");\n  let currentTasks = tasks;\n  if (filter === \"active\") {\n    currentTasks = tasks.filter(t => !t.isDone);\n  }\n  if (filter === \"completed\") {\n    currentTasks = tasks.filter(t => t.isDone);\n  }\n  const filteredTasks = filterValue => {\n    setFilter(filterValue);\n  };\n  const removeTask = taskId => {\n    setTasks(tasks.filter(t => t.id !== taskId));\n  };\n  const changeStatusTask = (taskId, isDone) => {\n    setTasks([...tasks.filter(t => t.isDone !== isDone)]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: todolistTitle,\n      tasks: currentTasks,\n      filteredTasks: filteredTasks,\n      removeTask: removeTask,\n      changeStatusTask: changeStatusTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"chcyCwFAd/6BKy8VpAeuIHP5gTA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","jsxDEV","_jsxDEV","App","_s","todolistTitle","tasks","setTasks","id","title","isDone","filter","setFilter","currentTasks","t","filteredTasks","filterValue","removeTask","taskId","changeStatusTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/galyamov/Desktop/1-todolist/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TasksType, Todolist} from \"./Todolist\";\r\n\r\nexport type FilteredTasksType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    const todolistTitle = \"What to learn\"\r\n\r\n    const [tasks, setTasks] = useState<TasksType[]>([\r\n        {id: 1, title: \"HTML\", isDone: true},\r\n        {id: 2, title: \"React\", isDone: false},\r\n        {id: 3, title: \"CSS\", isDone: true},\r\n        {id: 4, title: \"JS\", isDone: true},\r\n        {id: 5, title: \"Redux\", isDone: false},\r\n    ])\r\n\r\n    const [filter, setFilter] = useState<FilteredTasksType>(\"all\")\r\n\r\n    let currentTasks = tasks\r\n    if (filter === \"active\") {\r\n        currentTasks = tasks.filter(t => !t.isDone)\r\n    }\r\n    if (filter === \"completed\") {\r\n        currentTasks = tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    const filteredTasks = (filterValue: FilteredTasksType) => {\r\n        setFilter(filterValue)\r\n    }\r\n    const removeTask = (taskId: number) => {\r\n        setTasks(tasks.filter(t => t.id !== taskId))\r\n    }\r\n    const changeStatusTask = (taskId: number, isDone: boolean) => {\r\n       setTasks([...tasks.filter(t => t.isDone !== isDone)])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                title={todolistTitle}\r\n                tasks={currentTasks}\r\n                filteredTasks={filteredTasks}\r\n                removeTask={removeTask}\r\n                changeStatusTask={changeStatusTask}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAmBC,QAAQ,QAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEX,MAAMC,aAAa,GAAG,eAAe;EAErC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAc,CAC5C;IAACS,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE;EAAI,CAAC,EACpC;IAACF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,OAAO;IAAEC,MAAM,EAAE;EAAK,CAAC,EACtC;IAACF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE;EAAI,CAAC,EACnC;IAACF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAClC;IAACF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,OAAO;IAAEC,MAAM,EAAE;EAAK,CAAC,CACzC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAoB,KAAK,CAAC;EAE9D,IAAIc,YAAY,GAAGP,KAAK;EACxB,IAAIK,MAAM,KAAK,QAAQ,EAAE;IACrBE,YAAY,GAAGP,KAAK,CAACK,MAAM,CAACG,CAAC,IAAI,CAACA,CAAC,CAACJ,MAAM,CAAC;EAC/C;EACA,IAAIC,MAAM,KAAK,WAAW,EAAE;IACxBE,YAAY,GAAGP,KAAK,CAACK,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACJ,MAAM,CAAC;EAC9C;EAEA,MAAMK,aAAa,GAAIC,WAA8B,IAAK;IACtDJ,SAAS,CAACI,WAAW,CAAC;EAC1B,CAAC;EACD,MAAMC,UAAU,GAAIC,MAAc,IAAK;IACnCX,QAAQ,CAACD,KAAK,CAACK,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKU,MAAM,CAAC,CAAC;EAChD,CAAC;EACD,MAAMC,gBAAgB,GAAGA,CAACD,MAAc,EAAER,MAAe,KAAK;IAC3DH,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAACK,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACJ,MAAM,KAAKA,MAAM,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,oBACIR,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBnB,OAAA,CAACF,QAAQ;MACLS,KAAK,EAAEJ,aAAc;MACrBC,KAAK,EAAEO,YAAa;MACpBE,aAAa,EAAEA,aAAc;MAC7BE,UAAU,EAAEA,UAAW;MACvBE,gBAAgB,EAAEA;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACrB,EAAA,CA3CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}