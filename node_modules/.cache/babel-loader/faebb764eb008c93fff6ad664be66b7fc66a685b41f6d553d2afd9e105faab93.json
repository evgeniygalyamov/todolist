{"ast":null,"code":"import React,{useState}from\"react\";import{Button}from\"./Button\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const Todolist=_ref=>{let{todolistID,title,tasks,filteredTasks,removeTask,changeStatusTask,addTask}=_ref;const[newTask,setNewTask]=useState(\"\");const[error,setError]=useState(false);const[filterBtn,setFilterBtn]=useState(\"all\");const tasksList=tasks.length?tasks.map(t=>{return/*#__PURE__*/_jsxs(\"li\",{className:t.isDone?\"isDone\":\"\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:t.isDone,onChange:e=>changeStatusTaskHandler(t.id,e)}),/*#__PURE__*/_jsx(\"span\",{children:t.title}),/*#__PURE__*/_jsx(Button,{onClick:()=>removeTask(todolistID,t.id),title:\"x\"})]},t.id);}):/*#__PURE__*/_jsx(\"div\",{children:\"Todolist required\"});const filteredTaskAll=filterValue=>{filteredTasks(todolistID,filterValue);setFilterBtn(filterValue);};const changeStatusTaskHandler=(taskId,e)=>{changeStatusTask(todolistID,taskId,e.currentTarget.checked);};const addTaskHandler=()=>{if(newTask.trim()){addTask(todolistID,newTask.trim());setNewTask(\"\");}else{setError(true);}};const onKeyInputHandler=e=>{if(e.key===\"Enter\"){addTask(todolistID,newTask);setNewTask(\"\");}};const onChangeInputHandler=e=>{if(e.currentTarget){setNewTask(e.currentTarget.value);setError(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:title}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{value:newTask,onChange:onChangeInputHandler,onKeyDown:onKeyInputHandler,className:error?\"error\":\"\"}),/*#__PURE__*/_jsx(Button,{title:\"+\",onClick:addTaskHandler}),error&&/*#__PURE__*/_jsx(\"h4\",{className:\"errorMessage\",children:\"input is empty\"})]}),/*#__PURE__*/_jsx(\"ul\",{children:tasksList}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Button,{className:filterBtn===\"all\"?\"filteredBtn\":\"\",onClick:()=>filteredTaskAll(\"all\"),title:\"All\"}),/*#__PURE__*/_jsx(Button,{className:filterBtn===\"active\"?\"filteredBtn\":\"\",onClick:()=>filteredTaskAll(\"active\"),title:\"Active\"}),/*#__PURE__*/_jsx(Button,{className:filterBtn===\"completed\"?\"filteredBtn\":\"\",onClick:()=>filteredTaskAll(\"completed\"),title:\"Completed\"})]})]});};","map":{"version":3,"names":["React","useState","Button","jsx","_jsx","jsxs","_jsxs","Todolist","_ref","todolistID","title","tasks","filteredTasks","removeTask","changeStatusTask","addTask","newTask","setNewTask","error","setError","filterBtn","setFilterBtn","tasksList","length","map","t","className","isDone","children","type","checked","onChange","e","changeStatusTaskHandler","id","onClick","filteredTaskAll","filterValue","taskId","currentTarget","addTaskHandler","trim","onKeyInputHandler","key","onChangeInputHandler","value","onKeyDown"],"sources":["/Users/galyamov/Documents/INCUBATOR/Front-end/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\nimport {Button} from \"./Button\";\nimport {FilteredTasksType, TasksType} from \"./App\";\n\ntype TodolistType = {\n    todolistID: string\n    title: string\n    tasks: TasksType[]\n    filteredTasks: (todolistID: string, filterValue: FilteredTasksType) => void\n    removeTask: (todolistID: string, taskId: string) => void\n    changeStatusTask: (todolistID: string, taskId: string, isDone: boolean) => void\n    addTask: (todolistID: string, title: string) => void\n}\n\n\nexport const Todolist = ({todolistID, title, tasks, filteredTasks, removeTask, changeStatusTask, addTask}: TodolistType) => {\n\n    const [newTask, setNewTask] = useState(\"\")\n    const [error, setError] = useState(false)\n    const [filterBtn, setFilterBtn] = useState(\"all\")\n\n\n    const tasksList = tasks.length\n        ? tasks.map(t => {\n                return (\n                    <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\n                        <input type=\"checkbox\" checked={t.isDone}\n                               onChange={(e) => changeStatusTaskHandler(t.id, e)}/>\n                        <span>{t.title}</span>\n                        <Button onClick={() => removeTask(todolistID, t.id)} title={\"x\"}/>\n                    </li>\n                )\n            }\n        ) : <div>Todolist required</div>\n\n    const filteredTaskAll = (filterValue: FilteredTasksType) => {\n        filteredTasks(todolistID, filterValue)\n        setFilterBtn(filterValue)\n    }\n    const changeStatusTaskHandler = (taskId: string, e: ChangeEvent<HTMLInputElement>) => {\n        changeStatusTask(todolistID, taskId, e.currentTarget.checked)\n    }\n    const addTaskHandler = () => {\n        if (newTask.trim()) {\n            addTask(todolistID, newTask.trim())\n            setNewTask(\"\")\n        } else {\n            setError(true)\n        }\n    }\n    const onKeyInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addTask(todolistID, newTask)\n            setNewTask(\"\")\n        }\n    }\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget) {\n            setNewTask(e.currentTarget.value)\n            setError(false)\n        }\n    }\n\n\n    return (\n        <div>\n            <h3>{title}</h3>\n            <div>\n                <input value={newTask}\n                       onChange={onChangeInputHandler}\n                       onKeyDown={onKeyInputHandler}\n                       className={error ? \"error\" : \"\"}\n                />\n                <Button title={\"+\"} onClick={addTaskHandler}/>\n                {error && <h4 className={\"errorMessage\"}>input is empty</h4>}\n            </div>\n            <ul>\n                {tasksList}\n            </ul>\n            <div>\n                <Button className={filterBtn === \"all\" ? \"filteredBtn\" : \"\"} onClick={() => filteredTaskAll(\"all\")} title={\"All\"}/>\n                <Button className={filterBtn === \"active\" ? \"filteredBtn\" : \"\"} onClick={() => filteredTaskAll(\"active\")} title={\"Active\"}/>\n                <Button className={filterBtn === \"completed\" ? \"filteredBtn\" : \"\"} onClick={() => filteredTaskAll(\"completed\")} title={\"Completed\"}/>\n            </div>\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}